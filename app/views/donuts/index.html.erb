<div class="container">
  <div class="row donuthome">
    <div class="small-6 large-5 columns donutDiv">
      <div class="donutbackground">
        <div class="large-12 columnslogo">
          <div class="homelogo"></div>
        </div>
        <div class="large-12 columnsmap">
          <div class ="donutlistContainer" id="donutTop">
            <h4 class="donutlistheader">FreshDonuts in your area!</h4>
            <div class="donutlist">
              <table class="donuttable">
                <% @donuts.each do |d| %>
                  <tr>
                    <td class="tablelist"><%= d.user.name %></td>
                    <td class="tablelist"><%= d.name %></td>
                    <td class="tablelist"><%= d.created_at %></td>
                  </tr>
                <% end %>
              </table>
            </div>

          </div>
        </div>
        <div class="large-12 columns vendorclick">
          <a id="clickhere1">Are You a Vendor? Click Here</a>
        </div>
      </div><!-- end of donutbackground -->
    </div><!-- End of donutdiv -->
    <div class="small-6 large-7 columns mapContainer">
      <div id="map-canvas"></div>
    </div>
  </div><!-- end of Row donutHome -->

  <div class="instructionContainer">
    <div class="row vendorinstructionContainer">
      <div class="large-6 columns instructionsLeft">
        <h4 class="postfresh">Are you a business looking to post freshdonuts?</h4>
      </div>
      <div class="large-6 columns instructionsRight">
        <p class="vendorinstructionparagraph">Freshdonut  was created to help donutmakers bring their delectables to their guests as fresh as possible. A donut should be enjoyed in it's prime - immediately. If you are a vendor, follow the 3 easy steps for a happier donutmaker and guest relationship.</p>
      </div>
    </div>
  </div>

  <div class="row vendorhome">   
      <div class="small-2 large-4 columns vendorcolumns">
        <div id="oneimg"></div>
        <h1 class="vendortitle">Register Your Business</h1>
      </div>
      <div class="small-4 large-4 columns vendorcolumns">
        <div id="twoimg"></div>
        <h1 class="vendortitle">Turn on Geolocation</h1>
      </div>
      <div class="small-6 large-4 columns vendorcolumns">
        <div id="threeimg"></div>
        <h1 class="vendortitle">Post Donuts!</h1>
      </div>
  </div>


<a id="clickhere2">Go Back Up</a>

  </div><!-- end of row vendorhome -->


</div><!-- end of Container -->



<!-- jQuery Scrolling -->
<script type="text/javascript">


$('#clickhere1').click(
  function (e) {
    $('html, body').animate({scrollTop: '800px'}, 800);
  }
);
$('#clickhere2').click(
  function (e) {
    $('html, body').animate({scrollTop: '0px'}, 800);
  }
);

</script>

<!-- Start of Google Maps and Geolocation using HTML 5 -->
<!-- User must accept geolocation settings to use FreshDonut -->
<script type="text/javascript">
  
  var map;

  function initialize() {       

    var myLatLng = new google.maps.LatLng(-34.0128358, -118.495338); 
    // Set as a var because it will also be used for center/marker position -- you can elect to create separate google.maps.LatLng objects
    var DonutMarker;
    var mapOptions = {
      center: myLatLng, // see above
      zoom: 13 // arbitrary; you can zoom at whichever level you like
    };
    map = new google.maps.Map(document.getElementById("map-canvas"),
      mapOptions); // rendering a map in a div with the id of "map-canvas" and the options specified above in mapOptions

    if(navigator.geolocation) {
        browserSupportFlag = true;
        navigator.geolocation.getCurrentPosition(function(position) {
        // navigator html5 method to geolocate
        myLatLng = new google.maps.LatLng(position.coords.latitude,position.coords.longitude);
        // var lat = position.coords.latitude;
        // console.log(lat);
        // long = position.coords.longitude;
        // console.log(long);
        // variable set to store lat/long to be inserted into google maps.
        // position.coords.latitude & longitude used to filter search for donuts & yelp api browsing (creation of donut vendor)
        map.setCenter(myLatLng);
        DonutMarker = new google.maps.Marker({
        position: myLatLng,
        });

        // creates geocoder object. commented out for scope limitation.
        var geocoder = new google.maps.Geocoder
        geocoder.geocode({location: myLatLng}, function(geodata) {
            address = geodata[0].formatted_address
            yelp()
        });
        // end of geocoder object


      }, function() {
        handleNoGeolocation(browserSupportFlag);
      });
    }


    // Browser doesn't support Geolocation
    else {
      browserSupportFlag = false;
      handleNoGeolocation(browserSupportFlag);
    }

        function handleNoGeolocation(errorFlag) {
          if (errorFlag == true) {
            alert("Geolocation service failed. Please accept Geolocation Services to use FreshDonut");

          } else {
            alert("Your browser doesn't support geolocation. We've placed you at beautiful GA, however, you will not be able to use FreshDonut");

          }
          map.setCenter(myLatLng);
          showMeMarker = new google.maps.Marker({
            position: myLatLng,
            map: map
          });
        }

        getUsers();

        function getUsers() {

          $.ajax ({
            type: "GET", 
            dataType: "json", 
            // url: "http://FreshDonut.herokuapp.com/users.json"
            url: "http://localhost:3000/users.json"            
          }).done(function(data){
              mapUsers(data);
          });
        }

        
        function mapUsers(user_data) {

          // for loop to place each marker with info from the JSON
          var image = 'assets/donutmarker275small.png';
          var newMarker;
          var freshList;

            for (var i=0; i < user_data.length; i++) {                
              newMarker = new google.maps.Marker({
                position: new google.maps.LatLng(user_data[i].latitude, user_data[i].longitude),
                map: map, 
                title: "Fresh Donut",
                icon: image
              });

              

              
              for (var j=0; j < user_data[i]["donuts"].length; j++) {    
               freshList += user_data[i]["donuts"][j].name + '<br />';

              

               } // end of for(j) loop

                 var contentString = '<div style="width: 150px; height: 150px;">'+ user_data[i].name +'<br />' + '<br />' + 'Location:' + user_data[i].address + '<br />' + '<br />' + 'Fresh Donuts:' + '<br /><br />' + freshList + '</div>';


              google.maps.event.addListener(newMarker, 'click', getInfoCallback(map, contentString));      
            } //end of for(i) loop
        } //end of mapUsers function
       

// start of yelp api
// geolocation coordinates were formatted as "formatted address"
// to allow yelp api to search for results. results near geolocation were successful,
// however, i was unable to put these results as markers on google maps due to these
// addresses having to be reformatted to long/lat again. 
// for the purposes of this project, i will just post new vendor accounts using geocoder
// gem (it provides long/lat) to the map as markers.

    function yelp() {
      var auth = {
        //
        // Update with your auth tokens.
        //
        consumerKey: "QQo6EuAp8SJtp-hJZAIrdw",
        consumerSecret: "T22pm5eUnlxs_NtkuHQncxYzG-s",
        accessToken: "2Dx9CDpLDxY6cZM-5cvgFRyYz5Cxx1x6",
        // This example is a proof of concept, for how to use the Yelp v2 API with javascript.
        // You wouldn't actually want to expose your access token secret like this in a real application.
        accessTokenSecret: "Dzu8lvcvEabB5EdOFYZ26_WAawU",
        serviceProvider: {
          signatureMethod: "HMAC-SHA1"
        }
      };

    var terms = 'donuts';
    var near = 'Santa+Monica';
    var accessor = {
      consumerSecret: auth.consumerSecret,
      tokenSecret: auth.accessTokenSecret
    };
    parameters = [];
    parameters.push(['term', terms]);
    parameters.push(['location', address]);
    parameters.push(['callback', 'cb']);
    parameters.push(['oauth_consumer_key', auth.consumerKey]);
    parameters.push(['oauth_consumer_secret', auth.consumerSecret]);
    parameters.push(['oauth_token', auth.accessToken]);
    parameters.push(['oauth_signature_method', 'HMAC-SHA1']);
    var message = {
      'action': 'http://api.yelp.com/v2/search',
      'method': 'GET',
      'parameters': parameters
    };
    OAuth.setTimestampAndNonce(message);
    OAuth.SignatureMethod.sign(message, accessor);
    var parameterMap = OAuth.getParameterMap(message.parameters);
    parameterMap.oauth_signature = OAuth.percentEncode(parameterMap.oauth_signature)
    // console.log(parameterMap);
    $.ajax({
      'url': message.action,
      'data': parameterMap,
      'cache': true,
      'dataType': 'jsonp',
      'jsonpCallback': 'cb',
      'success': function(data, textStats, XMLHttpRequest) {   
        var output = data;
        console.log(output);
        geocodeYelpResults(output.businesses)
      } // end of ajax call 
    }); // end of yelp api
  } //end of yelp function
} //end of initialize tag


  
  


function geocodeYelpResults(results) {
  results.forEach(function (business) {
    var addressString = business.location.address[0] + ", " + business.location.city + ", " + business.location.state_code + " " + business.location.postal_code;
    var geocoder = new google.maps.Geocoder;
    geocoder.geocode({address: addressString}, function(geodata) {
    var marker = new google.maps.Marker({
          position: geodata[0].geometry.location,
          map: map,
    });//end of marker

    var contentwindow = '<div style="width: 150px; height: 150px;">'+ business.name + '<br />'+'<br />' + business.location.address + '<br />' + business.location.city + '<br />' + business.location.postal_code + ", " + business.location.state_code + '</div>';

      google.maps.event.addListener(marker, 'click', getInfoCallback(map, contentwindow));      
    });//end of geocoder
  }); //end of results.forEach
} //end of geocodeYelpResults function

// getInfoCallback used to retrieve and post infowindows to google maps.
function getInfoCallback(map, content) {
    var infowindow = new google.maps.InfoWindow({content: content});
    return function() {
          infowindow.setContent(content); 
          infowindow.open(map, this);        
    }; 
  };

google.maps.event.addDomListener(window, 'load', initialize);

</script>
<!-- End of Google Maps and Geolocation -->





            
    



